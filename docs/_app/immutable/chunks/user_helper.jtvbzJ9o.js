var ze=Object.defineProperty;var Ke=(n,e,t)=>e in n?ze(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var g=(n,e,t)=>(Ke(n,typeof e!="symbol"?e+"":e,t),t);import{s as Ze,e as C,t as ge,a as Ge,b as P,d as Q,f as Te,g as T,h as Ae,i as D,k as F,l as ee,o as _e,p as ke,c as Qe,_ as Ye,m as S,n as O,r as x}from"./scheduler.0bgu9SYv.js";import{S as Xe,i as Be}from"./index.F52-NEUU.js";import{t as j,P as xe,Q as et,y as Y,R as be,X as we,Y as U,Z as Me,_ as tt,$ as st,a0 as at,a1 as de,a2 as ie,a3 as rt,s as _,E as k,a4 as it,a5 as nt,a6 as ot,G as Le,u as N,a as $,c as w,a7 as lt,a8 as Ue,j as H,a9 as Je,aa as Ve,ab as te,T as ye,ac as ut,ad as dt,ae as W,af as fe,x as le,e as y,f as V,ag as v,ah as Z,J as B,ai as ue,aj as J,ak as M,al as ce,am as ct,an as Ee,ao as ht,ap as Re,aq as He,ar as ve,as as pt,at as ft,au as mt,av as It,aw as me,ax as $t,ay as Dt,az as bt,aA as wt,aB as yt,aC as vt,aD as Ce,aE as Et,aF as gt,aG as Gt,aH as Tt,m as u,B as R,aI as At,aJ as Pe,aK as _t,V as kt,aL as Ie,aM as $e,aN as De,A as Mt,aO as K,aP as Ut,aQ as Rt,l as X,H as Ne,aR as Fe,z as Ct,aS as Pt,K as Se,p as Nt,aT as Ft}from"./business_initializer.oDa-Pz29.js";import{$ as St}from"./runtime.1PAEHe6d.js";import{V as Oe}from"./verification_helper.WFQr-XeO.js";var se=(n=>(n[n.text=0]="text",n[n.email=1]="email",n[n.password=2]="password",n))(se||{});function Ot(n){let e;function t(s,i){return s[4]?Jt:Lt}let a=t(n),r=a(n);return{c(){e=C("div"),r.c()},l(s){e=P(s,"DIV",{});var i=Q(e);r.l(i),i.forEach(T)},m(s,i){F(s,e,i),r.m(e,null)},p(s,i){a===(a=t(s))&&r?r.p(s,i):(r.d(1),r=a(s),r&&(r.c(),r.m(e,null)))},d(s){s&&T(e),r.d()}}}function Wt(n){let e;function t(s,i){return s[4]?Ht:Vt}let a=t(n),r=a(n);return{c(){e=C("div"),r.c()},l(s){e=P(s,"DIV",{});var i=Q(e);r.l(i),i.forEach(T)},m(s,i){F(s,e,i),r.m(e,null)},p(s,i){a===(a=t(s))&&r?r.p(s,i):(r.d(1),r=a(s),r&&(r.c(),r.m(e,null)))},d(s){s&&T(e),r.d()}}}function jt(n){let e;function t(s,i){return s[4]?zt:qt}let a=t(n),r=a(n);return{c(){e=C("div"),r.c()},l(s){e=P(s,"DIV",{});var i=Q(e);r.l(i),i.forEach(T)},m(s,i){F(s,e,i),r.m(e,null)},p(s,i){a===(a=t(s))&&r?r.p(s,i):(r.d(1),r=a(s),r&&(r.c(),r.m(e,null)))},d(s){s&&T(e),r.d()}}}function Lt(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","password"),D(e,"placeholder",n[2]),D(e,"pattern",n[3])},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[17]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function Jt(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","password"),D(e,"placeholder",n[2]),D(e,"pattern",n[3]),e.required=!0},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[16]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function Vt(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","email"),D(e,"placeholder",n[2]),D(e,"pattern",n[3])},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[15]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function Ht(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","email"),D(e,"placeholder",n[2]),D(e,"pattern",n[3]),e.required=!0},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[14]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function qt(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","text"),D(e,"placeholder",n[2]),D(e,"pattern",n[3])},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[13]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function zt(n){let e,t,a,r;return{c(){e=C("input"),this.h()},l(s){e=P(s,"INPUT",{class:!0,type:!0,placeholder:!0,pattern:!0}),this.h()},h(){D(e,"class",t="input input-bordered "+n[1]+" w-full "+(n[8]!==""?"border-red-700":"")),D(e,"type","text"),D(e,"placeholder",n[2]),D(e,"pattern",n[3]),e.required=!0},m(s,i){F(s,e,i),S(e,n[0]),a||(r=[O(e,"input",n[12]),O(e,"input",n[10])],a=!0)},p(s,i){i&258&&t!==(t="input input-bordered "+s[1]+" w-full "+(s[8]!==""?"border-red-700":""))&&D(e,"class",t),i&4&&D(e,"placeholder",s[2]),i&8&&D(e,"pattern",s[3]),i&1&&e.value!==s[0]&&S(e,s[0])},d(s){s&&T(e),a=!1,x(r)}}}function Kt(n){let e,t,a=j(n[5],n[9])+"",r,s,i,o,f,c,l;function m(d,h){if(d[6]===se.text)return jt;if(d[6]===se.email)return Wt;if(d[6]===se.password)return Ot}let I=m(n),p=I&&I(n);return{c(){e=C("label"),t=C("span"),r=ge(a),i=Ge(),o=C("div"),p&&p.c(),f=Ge(),c=C("p"),l=ge(n[7]),this.h()},l(d){e=P(d,"LABEL",{class:!0,for:!0});var h=Q(e);t=P(h,"SPAN",{class:!0});var b=Q(t);r=Te(b,a),b.forEach(T),h.forEach(T),i=Ae(d),o=P(d,"DIV",{class:!0});var E=Q(o);p&&p.l(E),f=Ae(E),c=P(E,"P",{class:!0});var A=Q(c);l=Te(A,n[7]),A.forEach(T),E.forEach(T),this.h()},h(){D(t,"class","label-text"),D(e,"class",s="label "+(n[5]?"block":"hidden")),D(e,"for","name"),D(c,"class","flex items-center h-5 mt-2 text-red-700"),D(o,"class","form-control")},m(d,h){F(d,e,h),ee(e,t),ee(t,r),F(d,i,h),F(d,o,h),p&&p.m(o,null),ee(o,f),ee(o,c),ee(c,l)},p(d,[h]){h&544&&a!==(a=j(d[5],d[9])+"")&&_e(r,a),h&32&&s!==(s="label "+(d[5]?"block":"hidden"))&&D(e,"class",s),I===(I=m(d))&&p?p.p(d,h):(p&&p.d(1),p=I&&I(d),p&&(p.c(),p.m(o,f))),h&128&&_e(l,d[7])},i:ke,o:ke,d(d){d&&(T(e),T(i),T(o)),p&&p.d()}}}function Zt(n,e,t){let a;Qe(n,St,G=>t(9,a=G));let{bgColor:r=""}=e,{placeholder:s=""}=e,{pattern:i=""}=e,{validationFunc:o=void 0}=e,{isRequired:f=!1}=e,{lableTranslateKey:c=""}=e,{type:l=se.text}=e,{value:m=""}=e,I="",p="";const d=Ye();function h(G){const oe=G.currentTarget.value;t(8,p=o?o(oe):null),t(7,I=oe===""?"":p??"");const qe={value:oe,isValid:p==null&&oe.length>0};d("valueChange",qe)}function b(){m=this.value,t(0,m)}function E(){m=this.value,t(0,m)}function A(){m=this.value,t(0,m)}function L(){m=this.value,t(0,m)}function q(){m=this.value,t(0,m)}function z(){m=this.value,t(0,m)}return n.$$set=G=>{"bgColor"in G&&t(1,r=G.bgColor),"placeholder"in G&&t(2,s=G.placeholder),"pattern"in G&&t(3,i=G.pattern),"validationFunc"in G&&t(11,o=G.validationFunc),"isRequired"in G&&t(4,f=G.isRequired),"lableTranslateKey"in G&&t(5,c=G.lableTranslateKey),"type"in G&&t(6,l=G.type),"value"in G&&t(0,m=G.value)},[m,r,s,i,f,c,l,I,p,a,h,o,b,E,A,L,q,z]}class is extends Xe{constructor(e){super(),Be(this,e,Zt,Kt,Ze,{bgColor:1,placeholder:2,pattern:3,validationFunc:11,isRequired:4,lableTranslateKey:5,type:6,value:0})}}function Qt(n){return n===null||n===""||/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(n)?null:j("invalidEmail")}function ns(n){return n==null?null:n.trim().length>xe?j("tooLongNote"):""}function os(n,e={}){const t=e.withoutTranslate||!1;if(n===null)return n;if(n.includes("&&"))return t?"":j("illegalName")+" - &&";if(n.includes("~"))return t?"":j("illegalName")+" - ~";if(n==="guest")return t?"":j("illegalName")+" - guest";if(n.length>30||n.length<2)return t?"":j("illegalName");if(n.length>15&&!n.includes(" "))return t?"":j("illegalName");for(let a=0;a<Math.min(n.length,2);a++)if(n[a]===" ")return t?"":j("illegalName");return null}function We({worker:n,booking:e,timeToOrderOn1970Format:t,oldBooking:a,recurrenceSkipDate:r,defaultWork:s,defaultTakenHoures:i,defaultForbbidenTimes:o,isUpdate:f=!1,allowAllDay:c=!1}){if(!n)return!1;if(!c&&n.closeScheduleOnHolidays&&et(n,e.bookingDate))return Y.error("Holiday is a free day for this worker -> don't generate times"),!1;if(!c&&n.isClosingDate(e.bookingDate))return Y.error("This day is closing by the worker"),!1;t=be(t),c&&(s=[we("00:00"),we("23:59")]);const l=U(e.bookingDate);console.log("defaultWork",s),console.log("shifts",Me(n.shiftsFor({day:e.bookingDate}))),console.log(n.shiftsFor({day:e.bookingDate}));const m=s??Me(n.shiftsFor({day:e.bookingDate})),I=i??tt({worker:n,bookingDate:l,isUpdate:f,workerAction:c,oldBooking:a,recurrenceSkipDate:r});let p=o??I;console.log("bookingDate",l),console.log(I),s||m.sort(),o||p.sort(),console.log("333333333333333333333333333333333333333333"),p=st(p,t);const d=at.fromTreatmentsMap(e.treatments),h=Array.from({length:d.times.keys.length},(b,E)=>0);console.log(d),console.log("work",m);for(let b=0;b<m.length;b+=2){console.log("Inside for");let E=m[b];const A=m[b+1];if(E>t)break;if(A<=t)continue;if(E=t,de(E,new ie({minutes:d.totalMinutes}))>A&&!rt(A,e))return _.GI().error=k.endOfWork,console.log("11111111"),!1;const L=it(e,E),q=nt(h,L,p),z=q===0;return console.log("timeSegments",L),console.log("minutesToJump",q),!z&&ot(e,t,l,n,L)?(_.GI().error=k.currentlyOrderingForTime,console.log("2222"),!1):(console.log("2222111111111111111111"),z)}return console.log("1111222222222222222222222wwwwwwwwwwwwwww"),!1}class Yt extends Le{async getUpdatedBookingDate({transaction:e,bookingToUpdate:t,dateForRecurrenceChild:a,checkForUpdate:r=!1}){let s;if(await super.transactionGet(e,`${N}/${t.customerId}/${$}/${w}/${lt}`,t.recurrenceEvent!=null?Ue:H(t.bookingDate)).then(i=>{if(i.exists()&&i.data()!=null){const o=i.data()[t.bookingId];o!=null&&(s=Je.fromJson(o,t.bookingId))}}),s!=null)return this.checkBookingDateValidity({updatedBooking:s,dateForRecurrenceChild:a,checkForUpdate:r,bookingToUpdate:t})?s:void 0;_.GI().details="",_.GI().error=k.workerDeleteTheBookingMeanwhile}checkBookingDateValidity({updatedBooking:e,dateForRecurrenceChild:t,checkForUpdate:a,bookingToUpdate:r}){if(e.recurrenceEvent!=null){if(t!=null&&e.recurrenceEvent.exceptionDates.has(Ve(t)))return _.GI().details="",_.GI().error=k.workerUpdatedTheBookingMeanwhile,!1}else if(!a&&e.bookingDate.getTime()!=r.bookingDate.getTime())return _.GI().details="",_.GI().error=k.workerUpdatedTheBookingMeanwhile,!1;return!0}async addBooking({booking:e,worker:t,needPayInAdvance:a,afterPayment:r,customerData:s}){const i=`${y}/${V.currentBusinesssId}/${v}`,o=U(e.bookingDate),f=te(e.bookingDate),c=H(e.bookingDate),l={};e.recurrenceEvent==null?e.bookingWorkTimes.forEach((h,b)=>{a?l[`duringPaymentBookingsTime.${o}.${b}`]=[ye.fromDate(de(new Date,ut)),h]:(l[`bookingsTimes.${o}.${b}`]=h,r&&(l[`duringPaymentBookingsTime.${o}.${b}`]=null))}):e.bookingsEventsAsJson.forEach((h,b)=>{l[o]??(l[o]={}),l[o][b]=h});const m={};e.bookingsEventsAsJson.forEach((h,b)=>{m[f]??(m[f]={}),m[f][b]=h});const I=s.toJson();let p=1;e.recurrenceEvent!=null&&(p=e.recurrenceEvent.accurances??1e4),I.amoutOfBookings=dt(p);const d=async h=>{e.notificationType=ct({booking:e,worker:t});let b,E=!1;if(!r){if(b=await this.getWorkerFromTransactionRepo({transaction:h,workerId:e.workerId}),b===void 0)return!1;if(E=We({worker:b,booking:e,timeToOrderOn1970Format:be(e.bookingDate)}),!E)return _.GI().error===k.currentlyOrderingForTime?Y.error("Cant order the booking to this time currently someone pay for it"):(_.GI().error=k.takenBooking,Y.error("Cant order the booking to this time already taken")),!1}return e.addToClientAt&&this.transactionSetAsMap({transaction:h,path:`${N}/${e.customerId}/${$}`,docId:w,data:{clientAt:{[e.buisnessId]:{[e.workerId]:""}}}}),e.recurrenceEvent===void 0&&(console.log("timesData",l),this.transactionUpdateMultipleFieldsAsMap({transaction:h,path:`${i}/${t.id}/${$}`,docId:w,data:l})),a||(e.recurrenceEvent===void 0&&(console.log("bookingsEventsData",m),this.transactionSetAsMap({transaction:h,path:`${i}/${t.id}/${$}/${w}/${J}`,docId:c,data:m})),console.log("4444444444"),this.transactionSetAsMap({transaction:h,path:`${i}/${t.id}/${$}/${w}/${M}`,docId:o,data:{[e.bookingId]:e.toJson()}}),console.log("33333333333"),this.updateUserBooking({transaction:h,booking:e,isSetMerge:!0,command:W.increment,data:{[e.bookingId]:e.toJson()}}),console.log("wwwwwwwwwwwwwwwwwww"),this.transactionSetAsMap({transaction:h,path:`${y}/${e.buisnessId}/${v}/${e.workerId}/${$}`,docId:Z,data:{data:{[s.customerUuid]:I}}}),console.log("rr")),!0};return await this.runTransaction(d).then(h=>{if(h)e.recurrenceEvent==null&&!a&&this.realTimeEventsCounterHandler({workerId:e.workerId,businessId:e.buisnessId,increment:!0,types:e.typesOfEvents});else return;return e})}async deleteBooking({booking:e,deleteAllBooking:t,customerData:a,cancelDate:r,deleteFromWorker:s,deleteFromUser:i}){const o=U(e.bookingDate),f=te(e.bookingDate),c=H(e.bookingDate),l=`${y}/${V.currentBusinesssId}/${v}`,m={};e.bookingWorkTimes.forEach((h,b)=>{m[`bookingsTimes.${o}.${b}`]=null});const I={};e.bookingsEventsAsEvents.forEach((h,b)=>{I[`${f}.${b}`]=null});const p=this.toFormatedCustomerData({customerData:a,amountOfBookingsCommand:W.decrement}),d=async h=>await this.getUpdatedBookingDate({transaction:h,bookingToUpdate:e})==null?!1:(e.bookingDate=e.bookingDate,e.isUserExist=e.isUserExist,e.userDeleted||this.transactionUpdateMultipleFieldsAsMap({transaction:h,path:`${y}/${V.currentBusinesssId}/${v}/${e.workerId}/${$}`,docId:Z,data:p}),this.transactionUpdateMultipleFieldsAsMap({transaction:h,path:`${l}/${e.workerId}/${$}`,docId:w,data:m}),console.log("deleteFromWorker",s),s&&(console.log("bookingsEventsData",I),this.transactionUpdateMultipleFieldsAsMap({transaction:h,path:`${l}/${e.workerId}/${$}/${w}/${J}`,docId:c,data:I}),console.log("deleteAllBooking",t),t?this.transactionUpdateAsMap({transaction:h,path:`${l}/${e.workerId}/${$}/${w}/${M}`,docId:o,fieldName:e.bookingId}):this.transactionUpdateAsMap({transaction:h,path:`${l}/${e.workerId}/${$}/${w}/${M}`,docId:o,fieldName:`${e.bookingId}.cancelDate`,value:B(r)})),await this.updateUserBooking({booking:e,transaction:h,command:i?W.decrement:void 0,data:i?{[e.bookingId]:null}:{[`${e.bookingId}.workerDeleted`]:!0}}),!0);return await this.runTransaction(d).then(h=>h?(this.realTimeEventsCounterHandler({workerId:e.workerId,businessId:e.buisnessId,increment:!1,types:e.typesOfEvents}),[e]):null)}async deleteBookingOnlyFromUser({booking:e}){const t=async a=>await this.getUpdatedBookingDate({transaction:a,bookingToUpdate:e})==null?!1:(e.bookingDate=e.bookingDate,e.isUserExist=e.isUserExist,await this.updateUserBooking({booking:e,transaction:a,command:W.decrement,data:{[e.bookingId]:null}}),!0);return await this.runTransaction(t)}async updateBooking({oldBooking:e,newBooking:t,oldBookingDateForReccurence:a,newBookingCustomerData:r,oldBookingCustomerData:s}){const i=U(e.bookingDate),o=U(t.bookingDate),f=async c=>{if(await this.getUpdatedBookingDate({transaction:c,bookingToUpdate:e,dateForRecurrenceChild:a})==null)return!1;e.bookingDate=e.bookingDate,e.isUserExist=e.isUserExist;const m=await this.getWorkerFromTransactionRepo({transaction:c,workerId:t.workerId}),I=e.bookingDate.getTime()===t.bookingDate.getTime()&&e.treatmentLength>t.treatmentLength;return We({worker:m,booking:t,timeToOrderOn1970Format:be(t.bookingDate),oldBooking:e,recurrenceSkipDate:a,isUpdate:e.workerId===t.workerId,allowAllDay:I})?(this.updateBookingsEvents(c,e,t,a),this.updateBookingsTimes(c,e,t,o,i,a),r&&s&&this.updateWorkerCustomerData({transaction:c,oldBooking:e,newBooking:t,newBookingCustomerData:r,oldBookingCustomerData:s}),this.updateWorkerBookingsObjects(c,e,t,o,i,a),this.updateUserBookingsObject({oldBooking:e,transaction:c,newBooking:t,oldBookingDateForReccurence:a}),!0):(_.GI().error===k.currentlyOrderingForTime?Y.debug("Cant order the booking to this time currently someone pay for it"):(_.GI().error=k.takenBooking,Y.debug("Cant order the booking to this time already taken")),!1)};return this.runTransaction(f).then(c=>{if(c)if(e.workerId!==t.workerId)this.realTimeEventsCounterHandler({workerId:e.workerId,businessId:e.buisnessId,increment:!1,types:e.typesOfEvents}),this.realTimeEventsCounterHandler({workerId:t.workerId,businessId:t.buisnessId,increment:!0,types:t.typesOfEvents});else{const l=new Map;e.needCancel&&!t.needCancel&&l.set(fe.needCancel,1),e.status===le.waiting&&t.status!==le.waiting&&l.set(fe.onHold,1),e.status!==le.waiting&&t.status===le.waiting&&l.set(fe.onHold,-1),Object.keys(l).length>0&&this.realTimeEventsCounterHandler({workerId:t.workerId,businessId:t.buisnessId,increment:!1,types:l})}return c})}updateWorkerCustomerData({transaction:e,oldBooking:t,newBooking:a,newBookingCustomerData:r,oldBookingCustomerData:s}){if(a.workerId!==t.workerId){const o=this.toFormatedCustomerData({customerData:r,amountOfBookingsCommand:W.increment,useUserFirstBookingsDate:!0,saveExtraData:!0});this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${V.currentBusinesssId}/${v}/${a.workerId}/${$}`,docId:Z,data:o});const f=this.toFormatedCustomerData({customerData:s,amountOfBookingsCommand:W.decrement});this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${V.currentBusinesssId}/${v}/${t.workerId}/${$}`,docId:Z,data:f});return}const i={};r.lastBookingsDate!=null&&(i[`data.${r.customerUuid}.lastBookingsDate`]=B(r.lastBookingsDate)),r.firstBookingsDate!=null&&(i[`data.${r.customerUuid}.firstBookingsDate`]=B(r.firstBookingsDate)),r.userFirstBookingsDate!=null&&(i[`data.${r.customerUuid}.userFirstBookingsDate`]=B(r.userFirstBookingsDate)),console.log(i),this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${V.currentBusinesssId}/${v}/${a.workerId}/${$}`,docId:Z,data:i})}updateBookingsEvents(e,t,a,r){const s=`${y}/${a.buisnessId}/${v}`,i=te(a.bookingDate),o=H(a.bookingDate),f=te(t.bookingDate),c=H(t.bookingDate),l={};if(t.recurrenceEvent!=null&&r!=null){const I={};t.bookingsEventsAsJson.forEach((p,d)=>{I[`${U(t.bookingDate)}.${p}.RE.EDA.${U(r)}`]=""}),this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${s}/${t.workerId}/${$}`,docId:ue,data:I}),a.bookingsEventsAsJson.forEach((p,d)=>{l[i]||(l[i]={}),l[i][d]=p}),this.transactionSetAsMap({transaction:e,path:`${s}/${a.workerId}/${$}/${w}/${J}`,docId:o,data:l});return}let m={};t.bookingsEventsAsJson.forEach((I,p)=>{m[`${f}.${p}`]=null}),t.workerId!==a.workerId||c!==o?(this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${s}/${t.workerId}/${$}/${w}/${J}`,docId:c,data:m}),a.bookingsEventsAsJson.forEach((I,p)=>{l[i]?l[i][p]=I:l[i]={[p]:I}}),this.transactionSetAsMap({transaction:e,path:`${s}/${a.workerId}/${$}/${w}/${J}`,docId:o,data:l})):(a.bookingsEventsAsJson.forEach((I,p)=>{l[`${i}.${p}`]=I}),m={...m,...l},this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${s}/${t.workerId}/${$}/${w}/${J}`,docId:c,data:m}))}updateBookingsTimes(e,t,a,r,s,i){const o={};if(a.bookingWorkTimes.forEach((c,l)=>{o[`bookingsTimes.${r}.${l}`]=c}),t.recurrenceEvent!=null&&i!=null){this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}`,docId:w,data:o});return}let f={};t.bookingWorkTimes.forEach((c,l)=>{f[`bookingsTimes.${s}.${l}`]=null}),t.workerId!=a.workerId?(this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${t.buisnessId}/${v}/${t.workerId}/${$}`,docId:w,data:f}),this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}`,docId:w,data:o})):(f=Object.assign(f,o),this.transactionUpdateMultipleFieldsAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}`,docId:w,data:f}))}updateWorkerBookingsObjects(e,t,a,r,s,i){s!=r?(t.recurrenceEvent!=null&&i!=null?this.transactionUpdateAsMap({transaction:e,path:`${y}/${t.buisnessId}/${v}/${t.workerId}/${$}/${w}/${M}`,docId:s,fieldName:`${t.bookingId}.RE.EDA.${U(i)}`,value:""}):this.transactionUpdateAsMap({transaction:e,path:`${y}/${t.buisnessId}/${v}/${t.workerId}/${$}/${w}/${M}`,docId:s,fieldName:t.bookingId}),this.transactionSetAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}/${w}/${M}`,docId:r,data:{[a.bookingId]:a.toJson()}})):t.workerId!=a.workerId?(this.transactionUpdateAsMap({transaction:e,path:`${y}/${t.buisnessId}/${v}/${t.workerId}/${$}/${w}/${M}`,docId:s,fieldName:t.bookingId}),this.transactionSetAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}/${w}/${M}`,docId:r,data:{[a.bookingId]:a.toJson()}})):(t.recurrenceEvent!=null&&i!=null&&this.transactionUpdateAsMap({transaction:e,path:`${y}/${t.buisnessId}/${v}/${t.workerId}/${$}/${w}/${M}`,docId:s,fieldName:`${t.bookingId}.RE.EDA.${U(i)}`,value:""}),this.transactionUpdateAsMap({transaction:e,path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}/${w}/${M}`,docId:r,fieldName:a.bookingId,value:a.toJson()}))}updateUserBookingsObject({oldBooking:e,newBooking:t,transaction:a,oldBookingDateForReccurence:r}){e.recurrenceEvent!=null?r!=null&&(this.updateUserBooking({transaction:a,booking:e,data:{[`${e.bookingId}.RE.EDA.${U(r)}`]:""}}),this.updateUserBooking({transaction:a,booking:t,command:W.increment,data:{[t.bookingId]:t.toJson()}})):e.customerId!==t.customerId||e.monthStr!==t.monthStr?(e.recurrenceEvent===null&&this.updateUserBooking({transaction:a,booking:e,command:W.decrement,data:{[e.bookingId]:null}}),this.updateUserBooking({transaction:a,booking:t,command:W.increment,data:{[t.bookingId]:t.toJson()},isSetMerge:!0})):this.updateUserBooking({transaction:a,booking:t,data:{[t.bookingId]:t.toJson()}})}async updateUserBooking({booking:e,data:t,command:a,isSetMerge:r=!1,transaction:s}){if(e.userDeleted)return!1;const i=e.recurrenceEvent?Ue:H(e.bookingDate),o={};a!==void 0&&(o[`bookingsPreviews.${i}.bookingCount`]=a),o[`bookingsPreviews.${i}.lastUpdateTime`]=B(new Date);let f=ce.GI().userBookingsPathByBooking(e);return s!=null?(r?this.transactionSetAsMap({transaction:s,path:f,docId:i,data:t}):this.transactionUpdateMultipleFieldsAsMap({transaction:s,path:f,docId:i,data:t}),console.log("previewData",o),this.transactionUpdateMultipleFieldsAsMap({transaction:s,path:`${N}/${e.customerId}/${$}`,docId:w,data:o}),!0):r?await this.setAsMapWithMergeRepo({path:f,docId:i,valueAsJson:t}):await this.updateMultipleFieldsInsideDocAsMapRepo({path:f,docId:i,data:t})}async updateFieldsInBooking({booking:e,data:t,eventValue:a,updateUser:r=!0,changeInEvents:s=!1,incrementCounters:i=!0,counterType:o,eventFieldName:f}){const c=async l=>{const m=await this.getUpdatedBookingDate({transaction:l,bookingToUpdate:e});if(m==null)return!1;e.bookingDate=m.bookingDate,e.isUserExist=m.isUserExist;const I=`${y}/${e.buisnessId}/${v}`;if(s&&f!==null){const d=te(e.bookingDate),h=H(e.bookingDate),b={};e.bookingsEventsAsJson.forEach((E,A)=>{b[`${d}.${E}.${f}`]=a}),this.transactionUpdateMultipleFieldsAsMap({transaction:l,path:`${I}/${e.workerId}/${$}/${w}/${J}`,docId:h,data:b})}const p={};return Object.entries(t).forEach(([d,h])=>{p[e.isMultiRef?`${Ee(e.bookingDate)}.users.${e.bookingId}.${d}`:`${e.bookingId}.${d}`]=h}),this.transactionUpdateMultipleFieldsAsMap({transaction:l,path:`${I}/${e.workerId}/${$}/${w}/${M}`,docId:U(e.bookingDate),data:p}),!0};return await this.runTransaction(c).then(async l=>{if(l&&r){const m={};Object.entries(t).forEach(([I,p])=>{m[`${e.bookingId}.${I}`]=p}),await this.updateUserBooking({booking:e,data:m}),o!=null&&await this.realTimeEventsCounterHandler({workerId:e.workerId,businessId:e.buisnessId,increment:i,types:new Map([[o,1]])})}return l})}}class he{constructor({bookings:e,breaks:t}){g(this,"bookings",{});g(this,"breaks",[]);this.bookings=e,this.breaks=t}static empty(){return new he({bookings:{},breaks:[]})}merge(e){this.bookings={...this.bookings,...e.bookings},this.breaks=[...this.breaks,...e.breaks]}}class ne extends ht{constructor({title:t,day:a,shopIcon:r,id:s,start:i,note:o,blockSchedule:f,addedToDeviceCalendar:c=!1,color:l,workerId:m,businessModel:I,duration:p}){super();g(this,"title","");g(this,"timeId");g(this,"color",0);g(this,"duration",new ie({}));g(this,"day","");g(this,"start","");g(this,"partOfRecurrence",!1);g(this,"note","");g(this,"id","");g(this,"blockSchedule",!0);g(this,"minutesNotification",60);g(this,"notify",!1);g(this,"addedToDeviceCalendar",!1);g(this,"shopIcon",new Re);const d=He(a),h=we(i);this.bookingDate=new Date(d.getFullYear(),d.getMonth(),d.getDate(),h.getHours(),h.getMinutes()),this.businessName=I.shopName,this.buisnessId=I.businessId,this.workerId=m,this.title=t,this.day=a,this.shopIcon=r,this.id=s,this.start=i,this.note=o,this.blockSchedule=f,this.addedToDeviceCalendar=c,this.color=l,this.duration=p}static fromBreakModel(t){const a=new ne({title:t.title,day:t.day,shopIcon:t.shopIcon,id:t.id,start:t.start,note:t.note,blockSchedule:t.blockSchedule,addedToDeviceCalendar:t.addedToDeviceCalendar,color:t.color,workerId:t.workerId,businessModel:new ve({}),duration:t.duration});return a.recurrenceRef=t.recurrenceRef,a.recurrenceEventRefInfo=t.recurrenceEventRefInfo,a.partOfRecurrence=t.partOfRecurrence,a.timeId=t.timeId,a.recurrenceNotificationsLastDate=t.recurrenceNotificationsLastDate,a}static fromEvent(t){const a=new ne({title:t.eventName,day:U(t.from),shopIcon:t.breakIconData??new Re,id:t.breakId,start:Ee(t.from),note:t.note??"",blockSchedule:t.blockSchedule,addedToDeviceCalendar:t.breakAddedToDeviceCalendar,color:t.colorIndex,workerId:t.ids.length>0?t.ids[0]:"",businessModel:new ve({}),duration:new ie({minutes:t.durationMinutes})});return a.recurrenceRef=t.breakFatherRecurrenceId,a.recurrenceEventRefInfo=t.recurrenceBreakRefInfo,a.recurrenceFatherDate=t.recurrenceBreakFatherDate,a.minutesNotification=t.minutesBreakNotification,a.notify=t.breakNotificaiton,a.partOfRecurrence=t.partOfRecurrence,a.timeId=t.timeId,a}get currentDisplayDate(){return this.recurrenceChildDate??this.bookingDate}reminder(t){if(!this.notify)return null;const a=pt(this);if(a<ft()||t.fcmsTokens.size===0)return null;const r=`${this.buisnessId}--AAAA--${t.id}`;return new mt({businessName:this.businessName,address:"",isRecurrence:this.recurrenceEvent!==null,id:r,shopIcon:this.shopIcon,phoneToContact:"",dateToNotify:a,isMulti:!1,minutesToAdd:It()+this.minutesNotification,businessId:"",type:this.title!==""?this.title:j("break"),fcms:{...t.fcmsTokens}})}get timeIdAsKey(){return this.timeId!==void 0?`${this.start}_${this.timeId}`:this.start}}class Xt extends Le{async deleteWorker({worker:e,workerId:t,createdAt:a,buisnessId:r,managerDeletion:s=!0,batch:i,fromBusinessDeletion:o=!1}){i||(i=this.getBatch);const f=new he({});if(!e){const d=await this.getDocRepo({path:`${y}/${r}/${v}`,docId:t});if(d.exists())e=me.fromWorkerDocJson(d.data());else return}const c=`${y}/${r}/${v}`,l=await this.getAllDocsAndIdsInsideCollection({path:`${c}/${e.id}/${$}/${w}/${M}`});if(Object.entries(l).forEach(([d,h])=>{He(d)>=Ve(new Date)&&Object.entries(h).forEach(([b,E])=>{const A=Je.fromJson(E,b);f.bookings[A.bookingId]=A}),this.deleteDoc({batch:i,path:`${c}/${t}/${$}/${w}/${M}`,docId:d})}),o&&a){let d=a;for(;d<=new Date;){const h=H(d);Array.from({length:2},(b,E)=>{this.deleteDoc({batch:i,path:`${y}/${r}/${$t}/${t}/${h}`,docId:(E+1).toString()})}),this.deleteDoc({batch:i,path:`${y}/${r}/${Dt}/${t}/${bt}`,docId:h}),d=wt(d,1)}}const m=await this.getAllDocsAndIdsInsideCollection({path:`${c}/${e.id}/${$}/${w}/${J}`});Object.entries(m).forEach(([d,h])=>{yt(d)>=vt(new Date)&&(e.events.setEvents(h,e,d,{}),Object.entries(e.events.allEvents[d]??{}).forEach(([E,A])=>{Object.entries(A).forEach(([L,q])=>{if(q.isBreak){const z=ne.fromEvent(q);z.workerId=t,f.breaks.push(z)}})})),this.deleteDoc({batch:i,path:`${c}/${t}/${$}/${w}/${J}`,docId:d})}),(await this.getAllDocIdsInsideCollection({path:`${c}/${e.id}/${$}/${w}/${Ce}`})).forEach(d=>{this.deleteDoc({batch:i,path:`${c}/${t}/${$}/${w}/${Ce}`,docId:d})}),this.deleteDoc({batch:i,path:`${c}/${e.id}/${$}`,docId:Z}),this.deleteDoc({batch:i,path:`${c}/${e.id}/${$}`,docId:Et});const p=await this.getDocRepo({path:`${c}/${e.id}/${$}`,docId:ue});if(p.exists()){const d=new ve({});d.businessId=r,e.recurrence.setRecurrenceEvents(p.data(),t,d),Object.entries(e.recurrence.recurrenceEvents).forEach(([h,b])=>{Object.entries(b).forEach(([E,A])=>{if(A.recurrenceEvent==null||!A.isBreak)return;const L=ne.fromEvent(A);L.workerId=t,L.recurrenceNotificationsLastDate=e.notifications.recurrenceNotificationsLastDate,f.breaks.push(L)})}),this.deleteDoc({batch:i,path:`${c}/${e.id}/${$}`,docId:ue})}return this.deleteDoc({batch:i,path:`${c}/${e.id}/${$}`,docId:w}),!o&&s&&this.updateFieldInsideDocAsMap({batch:i,path:y,docId:r,fieldName:`workersIds.${e.id.replaceAll("+","")}`}),this.updateFieldInsideDocAsMapRepo({path:`${N}/${e.id}/${$}`,docId:w,fieldName:`permission.${r}`}),this.deleteDocRepo({path:`${c}/${e.id}/${$}`,docId:gt}),this.deleteDocRepo({path:`${c}/${e.id}/${$}`,docId:ue}),this.deleteDoc({batch:i,path:c,docId:e.id}),o||await this.removeChild({childPath:`${y}/${r}/${v}/${e.id}`}),o?f:(await this.getDocRepo({path:c,docId:e.id}).then(async d=>{if(d.exists()&&d.data()!=null){const h=me.fromWorkerDocJson(d.data()),b=new Set;Array.from(h.storyImages.values()).forEach(E=>{b.add(ce.GI().getImageStorageName("story_images",E)+".jpg")})}}),await this.commmitBatch(i).then(d=>{if(d)return f}))}async deleteBuissness({user:e,businessId:t,customWorkers:a,workerProductId:r,fromDeleteUser:s=!1,productId:i}){const o=this.getBatch;let f={};const c=new he({});if(t===V.currentBusinesssId&&a!=null)f=a;else try{const I=await this.getAllDocInsideCollectionRepo({path:`${y}/${t}/${v}`});I!==null&&I.forEach(p=>{const d=me.fromWorkerDocJson(p);f[d.id]=d})}catch{}const l=[];if(Object.entries(f).forEach(([I,p])=>{p!=null&&l.push(this.deleteWorker({createdAt:p.createdAt,buisnessId:t,workerId:I,worker:p,fromBusinessDeletion:!0,batch:o}))}),(await Promise.all(l)).forEach(I=>{I!=null&&c.merge(I)}),this.deleteDoc({batch:o,path:y,docId:t}),!s){const I={};I[`businessesInfo.${t}`]=null,i!==""&&(I[`productsIds.${i}.businessId`]=""),r!==""&&(I[`productsIds.${r}.businessId`]=""),this.updateMultipleFieldsInsideDocAsMap({batch:o,path:N,docId:e.id,data:I})}return this.deleteDoc({batch:o,path:`${y}/${t}/${Gt}`,docId:Tt}),await this.commmitBatch(o)?(this.removeChild({childPath:`${y}/${t}`}),c):null}}const ae=class ae{constructor(){g(this,"managerRepo",new Xt)}static GI(){return ae._singleton}async deleteWorker({buisnessId:e,workerId:t,worker:a}){const r=e.includes(u.GI().user.id.replaceAll("+","")),s=await this.managerRepo.deleteWorker({managerDeletion:r,workerId:t,buisnessId:e,worker:a});return e==V.currentBusinesssId&&(delete R.GI().workers[t],At.set(R.GI().workers)),s!==null}async deleteBuisness(e,t,a,r){return await this.managerRepo.deleteBuissness({user:u.GI().user,productId:a,customWorkers:R.GI().business.businessId===e?R.GI().workers:void 0,fromDeleteUser:t,workerProductId:r,businessId:e}).then(async s=>{if(s!==null){Y.debug(`Finish delete buisness --> ${e}`),u.GI().user.businessesInfo.delete(e),a!==""&&u.GI().user.productsIds.set(a,new Pe("",ye.fromDate(new Date),a)),r!==""&&u.GI().user.productsIds.set(r,new Pe("",ye.fromDate(new Date),r)),u.GI().user.userPublicData.permission.delete(e);const i=u.GI().user.userPublicData.myBuisnessesIds.indexOf(e,0);i>-1&&u.GI().user.userPublicData.myBuisnessesIds.splice(i,1),e===R.GI().business.businessId&&R.GI().emptyBusinessData()}return s!==null})}};g(ae,"_singleton",new ae);let pe=ae;const{v4:Bt}=Nt,re=class re{constructor(){g(this,"userRepo",new _t);g(this,"verificationRepo",new kt)}static GI(){return re._singleton}async createUser({gender:e,phone:t,email:a,isVerifiedPhone:r,isVerifiedEmail:s,userName:i,authProvider:o,userId:f}){const c=await this.userRepo.getDocSRV({path:Ie,docId:$e(t)});if(c===void 0||c.exists()){_.GI().error=k.alreadyExistPhone;return}const l=new De({id:f,name:i,email:a,isVerifiedPhone:r,isVerifiedEmail:s,phoneNumber:t,myBuisnessesIds:[],lastVisitedBuisnessesRemoved:[],lastVisitedBuisnesses:[],revenueCatId:Bt(),gender:e});console.log("currentUser",l),l.authProviders=o?new Map([[o,new Date]]):new Map;let m;if(o===Mt.Phone&&r&&(m=await this.mergePhoneCollectionWithUser(l,t),m||(l.isVerifiedPhone=!1)),!!await this.userRepo.createUser({user:l}))return m||new K}async deleteUser(e){if(Oe.GI().lastLoginDate==null||Ut(Rt(Oe.GI().lastLoginDate),Ft)>new Date)return _.GI().error=k.bigDiffrentBetweenLoginAndDelete,!1;await this._beforeLogout();const t=[...Object.keys(u.GI().user.userPublicData.permission)];await Promise.all(t.map(async r=>{if(u.GI().user.userPublicData.permission.get(r)===1)return await pe.GI().deleteWorker({workerId:e.id,buisnessId:r})}));const a=[...u.GI().user.userPublicData.myBuisnessesIds];return await Promise.all(a.map(async r=>await pe.GI().deleteBuisness(r,!0,"",""))),await u.GI().getAllBookingsDocs(),await this.markUserDeletedOnAllWorkerBookings(),await this.userRepo.deleteUser({user:e}),await this.verificationRepo.deleteUser().then(async r=>(r&&(u.GI().user=new De({name:"guest"}),X.set(u.GI().user),Ne.set(!1)),r))}async logout(){return await this._beforeLogout(),await this.verificationRepo.logout().then(async e=>(e&&(u.GI().user=new De({name:"guest"}),X.set(u.GI().user),Ne.set(!1)),e))}async _beforeLogout(){u.GI().cancelPublicDataListening(u.GI().user)}async markUserDeletedOnAllWorkerBookings(){const e=[];Object.entries(u.GI().user.bookings.all).forEach(([t,a])=>{a.workerDeleted||e.push(this.userRepo.updateFieldInsideDocAsMapRepo({path:`${y}/${a.buisnessId}/${v}/${a.workerId}/${$}/${w}/${M}`,docId:U(a.bookingDate),fieldName:a.isMultiRef?`${Ee(a.bookingDate)}.users.${t}.userDeleted`:`${t}.userDeleted`,value:!0}))}),await Promise.all(e)}async mergePhoneCollectionWithUser(e,t){const a=await this.userRepo.mergePhoneDataWithUser({phone:t,userId:e.id,name:e.name});if(!(a===void 0&&_.GI().error===k.alreadyExistPhone))return a}async updateCreditCardsPassword(e,t){const a={},r={};return e!==""&&Object.entries(u.GI().user.paymentCards).forEach(([s,i])=>{Object.entries(i).forEach(([o,f])=>{const l=f.decryptCard(e).encryptCard(t);a[s]??(a[s]={}),a[s][o]=l,r[s]??(r[s]={}),r[s][o]=l.toJson()})}),await this.userRepo.updateMultipleFieldsInsideDocAsMapRepo({docId:u.GI().user.id,path:N,data:{cardPaymentsPass:Fe(t),paymentCards:r}}).then(async s=>(s&&(u.GI().user.cardPaymentsPass=Fe(t),u.GI().user.paymentCards=a),s))}async updateEmail(e,{isVerified:t=!1}={}){return Qt(e)!==null?(_.GI().error=k.illegalFields,!1):e===u.GI().user.userPublicData.email?!0:de(u.GI().user.lastTimeUpdateEmail,new ie({days:1}))>new Date?(_.GI().error=k.cantUpdateEmailTooShortTimeBetween,!1):(u.GI().user.userPublicData.email=e,await this.userRepo.updateMultipleFieldsInsideDocAsMapRepo({path:`${N}/${u.GI().user.id}/${$}`,docId:w,data:{email:e,isVerifiedEmail:t}}).then(async a=>{if(a){u.GI().user.userPublicData.isVerifiedEmail=t;const r=new Date;return await this.userRepo.updateFieldInsideDocAsMapRepo({path:N,docId:u.GI().user.id,fieldName:"lastTimeUpdateEmail",value:r.toString()}).then(s=>(s&&(u.GI().user.lastTimeUpdateEmail=r),s))}return a}))}async updateSeenUpdates(e,t){return new Set([...u.GI().user.seenUpdates[e]].filter(r=>t.has(r))).size===t.size?!0:(u.GI().user.seenUpdates[e]=new Set([...t]),await this.userRepo.updateFieldInsideDocAsMapRepo({path:N,docId:u.GI().user.id,fieldName:`seenUpdates.${e}`,value:Array.from(t)}))}async setGender(e){return e===u.GI().user.gender?(console.log("22222222222222222222"),!0):(console.log("eeeeeeeeeeeeeeeee"),u.GI().user.gender=e,X.set(u.GI().user),await this.userRepo.updatePublicUserField({userId:u.GI().user.id,fieldName:"gender",value:Ct[e],businessesIds:Object.keys(u.GI().user.userPublicData.permission)}).then(t=>(console.log("33333333333",t),t)))}async updateName(e){if(e===u.GI().user.name)return!0;const t=u.GI().user;return t.name=e,X.set(t),await this.userRepo.updatePublicUserField({userId:t.id,businessesIds:Object.keys(t.userPublicData.permission),fieldName:"name",value:e}).then(async a=>{if(a){const r=[];t.userPublicData.myBuisnessesIds.forEach(s=>{r.push(this.userRepo.updateFieldInsideDocAsMapRepo({fieldName:"ownersName",docId:s,path:y,value:e}).then(i=>{i&&s==V.currentBusinesssId&&(R.GI().business.ownersName=e)}))}),t.isVerifiedPhone&&r.push(this.userRepo.updateFieldInsideDocAsMapRepo({fieldName:"name",docId:$e(t.phoneNumber),path:Ie,value:e})),await Promise.all(r)}return a})}async addOrRemoveLikeForStoryImage(e,t,a,r){var i;const s=await this.userRepo.updateFieldInsideDocAsArrayRepo({path:N,docId:a,fieldName:"storyLikes",value:e,command:r});if(s){const o=((i=R.GI().workers[t])==null?void 0:i.storylikesAmount[e])??0;r===Pt.add?(await this.userRepo.incrementNumberChild({childPath:ce.GI().getLisksChildPath(t),valueId:e,delta:1,command:W.increment}),u.GI().user.storyLikes.push(e),R.GI().workers[t]&&(R.GI().workers[t].storylikesAmount[e]=o+1)):(o>=0&&(await this.userRepo.incrementNumberChild({childPath:ce.GI().getLisksChildPath(t),valueId:e,delta:1,command:W.decrement}),R.GI().workers[t]&&(R.GI().workers[t].storylikesAmount[e]=Math.max(R.GI().workers[t].storylikesAmount[e]-1,0))),u.GI().user.storyLikes=u.GI().user.storyLikes.filter(f=>f!=e))}return s}async addAuthProvider({provider:e,isVerifiedPhone:t,phone:a,isVerfiedEmail:r,email:s}){if(u.GI().user.authProviders.has(e))return new K;const i=new Date;u.GI().user.authProviders.set(e,i);const o={};if(u.GI().user.authProviders.forEach((c,l)=>{Se[l]!==null&&(o[Se[l]]=B(c))}),!await this.userRepo.updateFieldInsideDocAsMapRepo({docId:u.GI().user.id,path:N,fieldName:"authProviders",value:o}))u.GI().user.authProviders.delete(e);else{let c=new K;return a!=null&&t===!0&&(c=await this.updatePhone(a,t===!0)),s!=null&&await this.updateEmail(s,{isVerified:r===!0}),X.set(u.GI().user),c}return new K}async updatePhone(e,t){if(u.GI().user.phoneNumber===e&&t===u.GI().user.isVerifiedPhone)return new K;if(u.GI().user.phoneNumber!==e&&de(u.GI().user.lastTimeUpdatePhone,new ie({days:1}))>new Date){_.GI().error=k.cantUpdatePhonelTooShortTimeBetween;return}let a;if(t&&(a=await this.mergePhoneCollectionWithUser(u.GI().user,e),a==null&&(t=!1,u.GI().user.phoneNumber===e&&t===u.GI().user.isVerifiedPhone)))return new K;if((u.GI().user.isVerifiedPhone&&!t||u.GI().user.isVerifiedPhone&&u.GI().user.phoneNumber!==e)&&!await this.userRepo.deleteDocRepo({path:Ie,docId:$e(u.GI().user.phoneNumber)}))return;if(await this.userRepo.updatePhone({currentPhone:u.GI().user.phoneNumber,userId:u.GI().user.id,businessesIds:Object.keys(u.GI().user.userPublicData.permission),phone:e,isVerified:t})){const s=new Date;return await this.updateAllClients(u.GI().user.id,e,t),u.GI().user.phoneNumber!==e?(await this.userRepo.updateFieldInsideDocAsMapRepo({path:N,docId:u.GI().user.id,fieldName:"lastTimeUpdatePhone",value:s.toISOString()}).then(i=>{i&&(u.GI().user.lastTimeUpdatePhone=s)}),await this.handleScheduleMessgesPhoneChange(e),await this.handleExistBookingsPhoneChange(e)):await this.makeReminderToAllBookingsWithoutRemminder(t),u.GI().user.phoneNumber=e,u.GI().user.userPublicData.phoneNumber=e,u.GI().user.isVerifiedPhone=t,u.GI().user.userPublicData.isVerifiedPhone=t,X.set(u.GI().user),a??new K}}async handleScheduleMessgesPhoneChange(e){}async makeReminderToAllBookingsWithoutRemminder(e){}async handleExistBookingsPhoneChange(e){const t={};await u.GI().getAllBookingsDocs();const a=new Yt,r=u.GI().user.bookings.all;Object.entries(r).forEach(([i,o])=>{o.customerPhone=e,!o.workerDeleted&&(t[i]=o)});const s=[];Object.entries(t).forEach(([i,o])=>{o.isMultiRef||s.push(a.updateFieldsInBooking({booking:o,data:{customerPhone:e}}))}),await Promise.all(s)}async updateAllClients(e,t,a){const r=u.GI().user.userPublicData.clientAt,s=[];return r.forEach((o,f)=>{const c=`${y}/${f}/${v}`;o.forEach(l=>{s.push(this.userRepo.updateMultipleFieldsInsideDocAsMapRepo({path:`${c}/${l}/${$}`,docId:Z,data:{[`data.${e}.isVerifiedPhone`]:a,[`data.${e}.phoneNumber`]:t}}))})}),!(await Promise.all(s)).includes(!1)}};g(re,"_singleton",new re);let je=re;export{Yt as B,is as C,se as I,je as U,ns as a,Qt as e,os as n};
